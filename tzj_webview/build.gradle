if (rootProject.getExtensions().findByName(getName()) == null) {
    ext.set("moduleType", Type.isModule.name())
} else {
    ext.set("moduleType", rootProject.getExtensions().getByName(getName()))
}

enum Type {
    isAPP,
    isModule,
    isFlutterPlugin;
}

if (moduleType == Type.isAPP.name()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
    if (moduleType == Type.isFlutterPlugin.name()) {
        def localProperties = new Properties()
        def localPropertiesFile = rootProject.file('local.properties')
        if (localPropertiesFile.exists()) {
            localPropertiesFile.withReader('UTF-8') { reader ->
                localProperties.load(reader)
            }
        }
        def flutterRoot = localProperties.getProperty('flutter.sdk')
        if (flutterRoot != null) {
            project.dependencies {
                if (project.getConfigurations().findByName("compileOnly")) {
                    compileOnly project.files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
                } else {
                    compile project.files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
                }
            }
        }
    }
}

android {
    compileSdkVersion _compileSdkVersion
    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main {
            if (moduleType == Type.isAPP.name()) {
                manifest.srcFile 'src/module/AndroidManifest.xml'
                java.srcDirs = [
                        'src/main/java',
                        'src/module/java'
                ]
                res.srcDirs = [
                        'src/main/res',
                        'src/module/res'
                ]
            } else if (moduleType == Type.isFlutterPlugin.name()) {
                java.srcDirs = [
                        'src/main/java',
                        'src/flutter/java'
                ]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                //这里修改apk文件名
                outputFileName =
                        "${project.getName()}" +
                        "_${variant.versionCode}" +
                        "_v${variant.versionName}" +
                        "_${variant.name}" +
                        "_${getDate()}.apk"
            }
    }

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HH_mm')
    return formattedDate
}

dependencies {
    implementation "com.android.support:design:$_supportVersion"
}
